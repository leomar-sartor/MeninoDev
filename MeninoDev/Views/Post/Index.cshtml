@using MeninoDev.Contexto
@using Microsoft.AspNetCore.Identity
@model MeninoDev.Entidades.PaginatedList<MeninoDev.Entidades.Post>
@inject SignInManager<UserApp> SignInManager

@{
    ViewData["Title"] = "Posts";
}

@{

    if (TempData["Sucesso"] != null)
    {
        <div class="alert alert-success">
            @TempData["Sucesso"]
        </div>
    }

    if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            @TempData["Error"]
        </div>
    }

    if (TempData["Exclusao"] != null)
    {
        <div class="alert alert-success">
            @TempData["Exclusao"]
        </div>
    }
}

@if (SignInManager.IsSignedIn(User))
{
    <p>LOGADO</p>
}

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            @Html.ActionLink("Novo", "Form", "Post", null, new { @class = "btn btn-primary btn-large" })
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

@foreach (var item in Model.OrderByDescending(m => m.Id))
{
    <div class="row mb-2">
        <div class="col-md-12">
            <div class="row g-0 border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">
                <div id="@Html.DisplayFor(modelItem => item.Id)" class="col p-4 d-flex flex-column position-static">
                    <strong class="d-inline-block mb-2 text-primary">Categoria</strong>
                    <h3 class="mb-0">
                        @Html.DisplayFor(modelItem => item.Title)
                    </h3>
                    <div class="mb-1 text-muted">
                        @Html.DisplayFor(modelItem => item.Date)
                    </div>
                    <p class="card-text mb-auto">
                        @Html.DisplayFor(modelItem => item.Content)
                    </p>

                    @Html.ActionLink("Continue reading", "Read", "Post", new { Id = @item.Id }, new { @class = "stretched-link" })
                </div>
            </div>
        </div>
    </div>
}

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
@*https://docs.microsoft.com/pt-br/aspnet/core/data/ef-mvc/sort-filter-page?view=aspnetcore-6.0*@
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    Previous
</a>




@*<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    @(Model.PageIndex - 2)
</a>

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default">
    @(Model.PageIndex - 1)
</a>

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    @Model.PageIndex
</a>


<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    @(Model.PageIndex + 1)
</a>

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    @(Model.PageIndex + 2)
</a>*@



<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   class="btn btn-default @nextDisabled">
    Next
</a>